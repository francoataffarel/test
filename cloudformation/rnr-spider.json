{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "SubnetA": {
            "Default": "subnet-2161476d",
            "Type": "String"
        },
        "SubnetB": {
            "Default": "subnet-e9bdd492",
            "Type": "String"
        },
        "VpcID": {
            "Default": "vpc-6e00c805",
            "Type": "String"
        },
        "ScrapydImage": {
            "Default": "092621740321.dkr.ecr.ap-south-1.amazonaws.com/scrapyd:latest",
            "Type": "String"
        },
        "ScrapydwebImage": {
            "Default": "092621740321.dkr.ecr.ap-south-1.amazonaws.com/scrapydweb",
            "Type": "String"
        },
        "Username": {
            "Type": "String",
            "Description": "Please enter your username",
            "AllowedPattern": "^[a-z]+$"
        },
        "ProxyUsername": {
            "Type": "String",
            "Description": "Please enter your username for SmartProxy",
            "Default": "sp26073980"
        },
        "ProxyPassword": {
            "Type": "String",
            "Description": "Please enter your password for SmartProxy"
        },
        "SpiderUsername": {
            "Type": "String",
            "Description": "Please enter admin username",
            "Default": "admin",
            "AllowedPattern": "^[a-zA-Z0-9]+$"
        },
        "SpiderPassword": {
            "Type": "String",
            "Description": "Please enter admin password",
            "Default": "Admin123",
            "AllowedPattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$"
        },
        "SchedulerLambdaImage": {
            "Default": "092621740321.dkr.ecr.ap-south-1.amazonaws.com/scheduler-lambda",
            "Type": "String"
        },
        "SeleniumLambdaImage": {
            "Default": "092621740321.dkr.ecr.ap-south-1.amazonaws.com/selenium-lambda",
            "Type": "String"
        },
        "Env": {
            "AllowedValues": [
                "dev",
                "stage",
                "prod"
            ],
            "Default": "dev",
            "Description": "Please select a Environment",
            "Type": "String"
        },
        "SubcategoryStackName": {
            "Description": "Name of an active Subcategory stack that contains the subcategory resources, such as the glue DBs and tables, that will be used in this stack.",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 255,
            "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
        }
    },
    "Metadata" : {
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : { "default" : "Stack Configuration" },
                    "Parameters" : [ "Username", "Env", "SubcategoryStackName"]
                },
                {
                    "Label" : { "default" : "Docker Images (only latest version will be used)" },
                    "Parameters" : ["ScrapydImage", "ScrapydwebImage", "SchedulerLambdaImage", "SeleniumLambdaImage"]
                },
                {
                    "Label" : { "default" : "Proxy Configuration" },
                    "Parameters" : [ "ProxyUsername", "ProxyPassword"]
                },
                {
                    "Label" : { "default" : "Spider Configuration" },
                    "Parameters" : [ "SpiderUsername", "SpiderPassword"]
                },
                {
                    "Label" : { "default":"VPC Configuration (usually left as per defaults)" },
                    "Parameters" : [ "SubnetA", "SubnetB", "VpcID" ]
                }
            ]
        }
    },
    "Resources": {
        "RawProductDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "product",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawReviewDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "review",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "SpiderLBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": {
                    "Fn::Join": [ "-", [ "rnrv2", "spiderlbsg",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "VpcId": {
                    "Ref": "VpcID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0",
                        "Description": "For traffic from Internet"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0",
                        "Description": "For traffic from Internet"
                    }
                ],
                "GroupDescription": "Security Group for Spider Load Balancer",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "SpiderContainerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": {
                    "Fn::Join": [ "-", [ "rnrv2", "spidercontainersg",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "VpcId": {
                    "Ref": "VpcID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 6800,
                        "ToPort": 6800,
                        "SourceSecurityGroupId": {
                            "Ref": "SpiderLBSecurityGroup"
                        },
                        "Description": "For traffic from load balancer security group"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 5000,
                        "ToPort": 5000,
                        "SourceSecurityGroupId": {
                            "Ref": "SpiderLBSecurityGroup"
                        },
                        "Description": "For traffic from load balancer security group"
                    }
                ],
                "GroupDescription": "Security Group for Spider containers",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ScrapydLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "IpAddressType": "ipv4",
                "Name": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydlb",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "SpiderLBSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "SubnetA"
                    },
                    {
                        "Ref": "SubnetB"
                    }
                ],
                "Type": "application",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ScrapydwebLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "IpAddressType": "ipv4",
                "Name": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydweblb",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "SpiderLBSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "SubnetA"
                    },
                    {
                        "Ref": "SubnetB"
                    }
                ],
                "Type": "application",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ScrapydTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydtg",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "VpcId": {
                    "Ref": "VpcID"
                },
                "Port": 6800,
                "Protocol": "HTTP",
                "TargetType": "ip",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "HealthCheckPath": "/health"
            }
        },
        "ScrapydwebTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydwebtg",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "VpcId": {
                    "Ref": "VpcID"
                },
                "Port": 5000,
                "Protocol": "HTTP",
                "TargetType": "ip",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "HealthCheckPath": "/health"
            }
        },
        "ScrapydLBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "ScrapydLoadBalancer"
                },
                "Port": 80,
                "Protocol": "HTTP",
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ScrapydTargetGroup"
                        }
                    }
                ]
            }
        },
        "ScrapydwebLBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "ScrapydwebLoadBalancer"
                },
                "Port": 80,
                "Protocol": "HTTP",
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ScrapydwebTargetGroup"
                        }
                    }
                ]
            }
        },
        "SpiderCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": {
                    "Fn::Join": [ "-", [ "rnrv2", "spidercluster",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ScrapydService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "ScrapydLBListener",
            "Properties": {
                "Cluster": {
                    "Ref": "SpiderCluster"
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": 1,
                "EnableExecuteCommand": true,
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "ENABLED",
                        "Subnets": [
                            {
                                "Ref": "SubnetA"
                            },
                            {
                                "Ref": "SubnetB"
                            }
                        ],
                        "SecurityGroups": [
                            {
                                "Ref": "SpiderContainerSecurityGroup"
                            }
                        ]
                    }
                },
                "LoadBalancers": [
                    {
                        "ContainerName": {
                            "Fn::Join": [ "-", [ "rnrv2", "scrapyd",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                        },
                        "ContainerPort": 6800,
                        "TargetGroupArn": {
                            "Ref": "ScrapydTargetGroup"
                        }
                    }
                ],
                "ServiceName": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydservice",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "TaskDefinition": {
                    "Ref": "ScrapydTask"
                },
                "HealthCheckGracePeriodSeconds": "30",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ScrapydwebService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": "ScrapydwebLBListener",
            "Properties": {
                "Cluster": {
                    "Ref": "SpiderCluster"
                },
                "DeploymentController": {
                    "Type": "ECS"
                },
                "DesiredCount": 1,
                "LaunchType": "FARGATE",
                "EnableExecuteCommand": true,
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "AssignPublicIp": "ENABLED",
                        "Subnets": [
                            {
                                "Ref": "SubnetA"
                            },
                            {
                                "Ref": "SubnetB"
                            }
                        ],
                        "SecurityGroups": [
                            {
                                "Ref": "SpiderContainerSecurityGroup"
                            }
                        ]
                    }
                },
                "LoadBalancers": [
                    {
                        "ContainerName": {
                            "Fn::Join": [ "-", [ "rnrv2", "scrapydweb",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                        },
                        "ContainerPort": 5000,
                        "TargetGroupArn": {
                            "Ref": "ScrapydwebTargetGroup"
                        }
                    }
                ],
                "ServiceName": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydwebservice",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "TaskDefinition": {
                    "Ref": "ScrapydwebTask"
                },
                "HealthCheckGracePeriodSeconds": "30",
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ScrapydTask": {
            "Type": "AWS::ECS::TaskDefinition",
            "DependsOn": "LogGroup",
            "Properties": {
                "Family": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydtask",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "ContainerDefinitions": [
                    {
                        "Image": {
                            "Ref": "ScrapydImage"
                        },
                        "Name": {
                            "Fn::Join": [ "-", [ "rnrv2", "scrapyd",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                        },
                        "PortMappings": [
                            {
                                "ContainerPort": 6800
                            }
                        ],
                        "Environment": [
                            {
                              "Name" : "S3_PRODUCT_URL",
                              "Value" : { "Fn::Sub": "s3://${RawProductDetailsBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                              "Name" : "S3_REVIEW_URL",
                              "Value" : { "Fn::Sub": "s3://${RawReviewDetailsBucket}/{name}-{time}-{chunk:03d}.json" }
                            },
                            {
                              "Name" : "S3_BROKENNESS_URL",
                              "Value" : { "Fn::Sub": "s3://${RawBrokennessDetailsBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                              "Name" : "S3_DISCOVERABILITY_SEARCH_URL",
                              "Value" : { "Fn::Sub": "s3://${RawDiscoverabilityDetailsBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                              "Name" : "S3_HOTSTYLES_URL",
                              "Value" : { "Fn::Sub": "s3://${RawHotstylesDetailsBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                              "Name" : "S3_DISCOVERABILITY_BROWSE_URL",
                              "Value" : { "Fn::Sub": "s3://${RawDiscBrowseDetailsBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                                "Name" : "S3_SERVICEABILITY_URL",
                                "Value" : { "Fn::Sub": "s3://${RawServiceabilityDetailsBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                              "Name" : "S3_BESTSELLERS_URL",
                              "Value" : { "Fn::Sub": "s3://${RawBestsellersBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                                "Name" : "S3_PRICING_URL",
                                "Value" : { "Fn::Sub": "s3://${RawPricingDetailsBucket}/{name}-{time}-{chunk:03d}.json"}
                            },
                            {
                              "Name" : "ENV",
                              "Value" : { "Ref": "Env" }
                            },
                            {
                              "Name" : "USERNAME",
                              "Value" : { "Ref": "SpiderUsername"}
                            },
                            {
                              "Name" : "PASSWORD",
                              "Value" : { "Ref": "SpiderPassword"}
                            },
                            {
                                "Name" : "SELENIUM_URL",
                                "Value": { "Fn::Sub": "https://${SeleniumJobApiGateway}.execute-api.${AWS::Region}.amazonaws.com/selenium/seleniumapi" }
                            },
                            {
                              "Name" : "PROXY_SESSION",
                              "Value" : { "Fn::Sub": "http://user-${ProxyUsername}-sessionduration-1:${ProxyPassword}@in.smartproxy.com:10001" }
                            },
                            {
                              "Name" : "PROXY_SESSION_US",
                              "Value" : { "Fn::Sub": "http://user-${ProxyUsername}-sessionduration-1:${ProxyPassword}@us.smartproxy.com:10002" }
                            },
                            {
                              "Name" : "PROXY_ROTATING",
                              "Value" : { "Fn::Sub": "http://user-${ProxyUsername}:${ProxyPassword}@in.smartproxy.com:10000" }
                            }
                        ],
                        "Command": [],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-group": {
                                    "Ref": "LogGroup"
                                },
                                "awslogs-stream-prefix": "scrapyd"
                            }
                        }
                    }
                ],
                "Cpu": "4096",
                "Memory": "8GB",
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "ExecutionRoleArn": {
                    "Ref": "SpiderExecutionRole"
                },
                "TaskRoleArn": {
                    "Ref": "SpiderTaskRole"
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ScrapydwebTask": {
            "Type": "AWS::ECS::TaskDefinition",
            "DependsOn": "LogGroup",
            "Properties": {
                "Family": {
                    "Fn::Join": [ "-", [ "rnrv2", "scrapydwebtask",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "ContainerDefinitions": [
                    {
                        "Image": {
                            "Ref": "ScrapydwebImage"
                        },
                        "Name": {
                            "Fn::Join": [ "-", [ "rnrv2", "scrapydweb",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                        },
                        "PortMappings": [
                            {
                                "ContainerPort": 5000
                            }
                        ],
                        "Environment": [
                            {
                              "Name" : "USERNAME",
                              "Value" : { "Ref": "SpiderUsername"}
                            },
                            {
                              "Name" : "PASSWORD",
                              "Value" : { "Ref": "SpiderPassword"}
                            },
                            {
                              "Name" : "ENV",
                              "Value" : { "Ref": "Env" }
                            },
                            {
                              "Name" : "SCRAPYD_SERVERS",
                              "Value": {
                                  "Fn::Join": ["", [{ "Ref": "SpiderUsername"}, ":", { "Ref": "SpiderPassword"}, "@", { "Fn::GetAtt": [ "ScrapydLoadBalancer",  "DNSName" ] }, ":80" ]]
                              }
                            }
                        ],
                        "Command": [],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-group": {
                                    "Ref": "LogGroup"
                                },
                                "awslogs-stream-prefix": "scrapydweb"
                            }
                        }
                    }
                ],
                "Cpu": "1024",
                "Memory": "2GB",
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "FARGATE"
                ],
                "ExecutionRoleArn": {
                    "Ref": "SpiderExecutionRole"
                },
                "TaskRoleArn": {
                    "Ref": "SpiderTaskRole"
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "SpiderExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": [ "-", [ "rnrv2", "spiderexecrole",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
                ],
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "SpiderTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": [ "-", [ "rnrv2", "spidertaskrole",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [ "-", [ "rnrv2", "taskrole",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:*",
                                    "Resource": [
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawProductDetailsBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawReviewDetailsBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawDiscoverabilityDetailsBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawDiscBrowseDetailsBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawHotstylesDetailsBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawServiceabilityDetailsBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawBrokennessDetailsBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawBestsellersBucket", "Arn" ] } , "/*" ] ] },
                                        { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "RawPricingDetailsBucket", "Arn" ] } , "/*" ] ] }
                                    ]
                                },
                                {
                                    "Sid": "cloudWatchWriteAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": "prod"
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [ "-", [ "rnrv2", "spider",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                }
            }
        },
        "RawDetailsDB": {
            "Type": "AWS::Glue::Database",
            "Properties": {
                "DatabaseInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "rawdb",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Description": "Glue database to store tables after crawling RawProductDetails Bucket"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "RawProductDetailsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "product",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for RNR raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "sub_categories",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "mrp",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "price",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating_count",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating_star",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating_aspect",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "sku",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "best_seller_rank",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "available",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "reviews_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "discount",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawProductDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "available,best_seller_rank,brand,category,channel,discount,extracted_date,mrp,name,price,product_href,rating,rating_aspect,rating_count,rating_star,reviews_href,sku,sub_categories"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "RawProductReviewsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "review",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for RNR raw data for product review files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "id",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "sku",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "title",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "star",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "description",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "verified",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "upvotes",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "author",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "aspects",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawReviewDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "skuid,brand,extracted_date,product_name,products,products-href,review_attributes,review_author,review_count,review_date,review_location,review_pagenumber,review_skuid,review_star,review_text,review_title,review_upvotes,review_verified,see all reviews,see all reviews-href,sub_categories,sub_categories-href,web-scraper-order,web-scraper-start-url"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "GlueRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "glue.amazonaws.com",
                                    "redshift.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "gluerole",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "rnrv2",
                                    "glueservicerole",
                                    {
                                        "Fn::If": [
                                            "IsDev",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        {
                                                            "Ref": "Env"
                                                        },
                                                        {
                                                            "Ref": "Username"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "Env"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "cloudWatchWriteAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "ec2Access",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeVpcEndpoints",
                                        "ec2:DescribeRouteTables",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:DeleteNetworkInterface",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcAttribute"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "glueFullAcess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "glue:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "redshiftFullAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "redshift:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "iamReadFullAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:ListRolePolicies",
                                        "iam:GetRole",
                                        "iam:GetRolePolicy"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "logsReadWriteAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:/aws-glue/*"
                                    ]
                                },
                                {
                                    "Sid": "s3ReadAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:ListBucket",
                                        "s3:ListAllMyBuckets",
                                        "s3:GetBucketAcl"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "s3CreateBucketAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:CreateBucket"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::aws-glue-*"
                                    ]
                                },
                                {
                                    "Sid": "s3ReadWriteAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::crawler-public*",
                                        "arn:aws:s3:::aws-glue-*/*",
                                        "arn:aws:s3:::*/*aws-glue-*/*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:DeleteTags"
                                    ],
                                    "Condition": {
                                        "ForAllValues:StringEquals": {
                                            "aws:TagKeys": [
                                                "aws-glue-service-resource"
                                            ]
                                        }
                                    },
                                    "Resource": [
                                        "arn:aws:ec2:*:*:network-interface/*",
                                        "arn:aws:ec2:*:*:security-group/*",
                                        "arn:aws:ec2:*:*:instance/*"
                                    ]
                                },
                                {
                                    "Sid": "AllowGlueToPutEvents",
                                    "Effect": "Allow",
                                    "Action": "events:PutEvents",
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "AllowGlueToGetSentimentAnalysis",
                                    "Effect": "Allow",
                                    "Action": [
                                        "comprehend:DetectSentiment",
                                        "comprehend:BatchDetectSentiment"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "secretsManagerAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "secretsmanager:GetResourcePolicy",
                                        "secretsmanager:GetSecretValue",
                                        "secretsmanager:DescribeSecret",
                                        "secretsmanager:ListSecretVersionIds",
                                        "secretsmanager:ListSecrets"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "rnrv2",
                                    "s3bucketrole",
                                    {
                                        "Fn::If": [
                                            "IsDev",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        {
                                                            "Ref": "Env"
                                                        },
                                                        {
                                                            "Ref": "Username"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "Env"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:*",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawProductDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawReviewDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawBrokennessDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawDiscoverabilityDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawDiscBrowseDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawHotstylesDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawServiceabilityDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawBestsellersBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "RawPricingDetailsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::ImportValue": {
                                                "Fn::Sub": "${SubcategoryStackName}-MappingBucketArn"
                                            }
                                        },
                                        "arn:aws:s3:::mensa-github-sync/*"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "ProductDetailsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Role": {
                    "Ref": "GlueRole"
                },
                "Description": "ETL Job to clean data from RawProductDetailsBucket to write it back to CleanDataBucket",
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/rnrv2_product_details.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/rnrv2_product_details.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_TABLE": {
                        "Ref": "RawProductDetailsTable"
                    },
                    "--PRODUCT_GLUE_TABLE": {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${SubcategoryStackName}-SkuMappingTable"
                        }
                    },
                    "--CATEGORY_GLUE_TABLE": {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${SubcategoryStackName}-CategoryMappingTable"
                        }
                    },
                    "--MAPPING_GLUE_DB": {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${SubcategoryStackName}-MappingDB"
                        }
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "product",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "ProductReviewsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Role": {
                    "Ref": "GlueRole"
                },
                "Description": "ETL Job to clean data from RawReviewDetailsBucket to write it back to CleanDataBucket",
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/rnrv2_product_reviews.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/rnrv2_product_reviews.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_TABLE": {
                        "Ref": "RawProductReviewsTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    },
                    "--GLUE_SCHEDULER_DB": {
                        "Ref": "PortalRDSDB"
                    },
                    "--GLUE_SCHEDULER_TABLE": {
                        "Ref": "PortalSchedulerConfigTable"
                    },
                    "--REGION_NAME":{
                        "Ref" : "AWS::Region" 
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "review",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "EmailTriggerGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Role": {
                    "Ref": "GlueRole"
                },
                "Description": "Post ETL Job to send notification or reports",
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/rnrv2_email_trigger.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/rnrv2_email_trigger.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--GLUE_REDSHIFT_DB": {
                        "Ref": "RedshiftDWDB"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_REVIEW_TABLE": {
                        "Ref":"RNRReviewTable"
                    },
                    "--ENV": {
                        "Ref": "Env"
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "emailtrigger",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "EmailAlertTrigger":{
            "Type":"AWS::Glue::Trigger",
            "Properties":{
                "Name":{
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "weeklyemailalert",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]                    
                },
                "Description":"Starts the Email Alert",
                "Type":"SCHEDULED",
                "Schedule":"cron(0 2 ? * MON *)",
                "StartOnCreation":true,
                "Actions":[
                    {
                        "JobName": {
                            "Ref": "EmailTriggerGlueJob"
                        }
                    }
                ]
            }
        },
        "GlueJobTrigger": {
            "Type": "AWS::Glue::Trigger",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "scheduledjobtrigger",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "Starts GLue Job",
                "Type": "SCHEDULED",
                "Schedule": "cron(30 2 * * ? *)",
                "StartOnCreation": true,
                "Actions": [
                    {
                        "JobName": {
                            "Ref": "ProductDetailsGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "ProductReviewsGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "BrokennessDetailsGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "DiscoverabilityDetailsGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "DiscBrowseDetailsGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "HotstylesDetailsGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "ServiceabilityDetailsGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "BestsellersGlueJob"
                        }
                    },
                    {
                        "JobName": {
                            "Ref": "PricingDetailsGlueJob"
                        }
                    }
                ],
                "WorkflowName": {
                    "Ref": "GlueWorkflow"
                }
            }
        },
        "GlueWorkflow": {
            "Type": "AWS::Glue::Workflow",
            "Properties": {
                "Description": "Workflow for orchestrating ETL Jobs",
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "workflow",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                }
            }
        },
        "ReviewStagingDB": {
            "Type": "AWS::Glue::Database",
            "Properties": {
                "DatabaseInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnr",
                                "reviewstagingdb",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Description": "Glue database to store tables after crawling Clean Data Bucket"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "RawBrokennessDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "brokenness",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawBrokennessDetailsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "brokenness",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Brokenness raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "total_skus",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "available_skus",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "score",
                                "Type": "double",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawBrokennessDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "brand,channel,name,skuid,product_href,total_skus,available_skus,score,extracted_date"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "BrokennessDetailsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Role": {
                    "Ref": "GlueRole"
                },
                "Description": "ETL Job to clean data from RawBrokennessDetailsBucket to write it back to Redshift",
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/brokenness.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/brokenness.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_TABLE": {
                        "Ref": "RawBrokennessDetailsTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "brokenness",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "RawDiscoverabilityDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "discoverability",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawDiscoverabilityDetailsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "discoverability",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Discoverability raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "mrp",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "price",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "discount",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating_count",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "page",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "keyword",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "sort",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "sponsored",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_sponsored",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawDiscoverabilityDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "brand,channel,name,skuid,product_href,mrp,price,discount,rating,rating_count,rank,page,keyword,sort,sponsored,rank_sponsored,extracted_date"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "DiscoverabilityDetailsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "discoverability",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "ETL Job to clean data from RawDiscoverabilityDetailsBucket, update brand type and write it back to Redshift",
                "Role": {
                    "Ref": "GlueRole"
                },
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/discoverability.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/discoverability.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_DISC_TABLE": {
                        "Ref": "RawDiscoverabilityDetailsTable"
                    },
                    "--GLUE_RDS_DB": {
                        "Ref": "PortalRDSDB"
                    },
                    "--GLUE_RDS_TABLE": {
                        "Ref": "PortalBrandCompetitorMappingTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "RawHotstylesDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "hotstyles",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawHotstylesDetailsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "hotstyles",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Hotstyles raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "mrp",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "price",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "discount",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating_count",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_1",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_2",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_3",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_4",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_1",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_2",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_3",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_4",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawHotstylesDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "skuid,name,channel,product_href,extracted_date,mrp,price,discount,rating,rating_count,category_1,category_2,category_3,category_4,rank_1,rank_2,rank_3,rank_4"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "HotstylesDetailsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "hotstyles",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "ETL Job to clean data from RawHotstylesDetailsBucket, update brand type and write it back to Redshift",
                "Role": {
                    "Ref": "GlueRole"
                },
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/hotstyles.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/hotstyles.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_TABLE": {
                        "Ref": "RawHotstylesDetailsTable"
                    },
                    "--GLUE_RDS_DB": {
                        "Ref": "PortalRDSDB"
                    },
                    "--GLUE_RDS_TABLE": {
                        "Ref": "PortalHotStylesTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "RNRReviewTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RedshiftDWDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::If": ["IsProd", "rnr_prod_review_and_rating", "rnr_dev_review_and_rating_review"]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for etl job files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "connectionName": {
                            "Fn::If": [
                                "IsProd",
                                "redshift-mensa-dwh",
                                "redshift-mensa-dwh_dev"
                            ]
                        },
                        "classification": "redshift",
                        "typeOfData": "table",
                        "UPDATED_BY_CRAWLER": "rnr-reviewstagingcrawler-prod"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "date",
                                "Type": "date",
                                "Comment": ""
                            },
                            {
                                "Name": "sentiment",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "star",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "upvotes",
                                "Type": "int",
                                "Comment": ""
                            },
                            {
                                "Name": "author",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "aspects",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "verified",
                                "Type": "boolean",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "description",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "title",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "review_date",
                                "Type": "date",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "id",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                             "Fn::If": ["IsProd", "rnr_prod.review_and_rating.review", "rnr_dev.review_and_rating.review"]
                        },
                        "InputFormat": "",
                        "OutputFormat": "",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
                            "Parameters": {}
                        },
                        "Parameters": {
                            "UPDATED_BY_CRAWLER": "rnr-reviewstagingcrawler-prod",
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "connectionName": {
                            "Fn::If": [
                                    "IsProd",
                                    "redshift-mensa-dwh",
                                    "redshift-mensa-dwh_dev"
                                ]   
                            },
                            "classification": "redshift",
                            "typeOfData": "table"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RedshiftDWDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "RedshiftDWDB": {
            "Type": "AWS::Glue::Database",
            "Properties": {
                "DatabaseInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "redshiftdwdb",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Description": "Glue database to store tables after crawling Redshift Database for joins"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "RawDiscBrowseDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "discbrowse",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawDiscBrowseDetailsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "discbrowse",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for DiscBrowse raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "mrp",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "price",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "discount",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rating_count",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "page",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "sponsored",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_sponsored",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_page_name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_scroll_times",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_nav",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_nav_type",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_nav_title",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_nav_subtitle",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_nav_url",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "primary_nav_has_brand_name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_page_name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_scroll_times",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_nav",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_nav_type",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_nav_title",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_nav_subtitle",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_nav_url",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "secondary_nav_has_brand_name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "offer_type",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "offer_title",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "offer_start_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "offer_end_date",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawDiscBrowseDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "brand,channel,name,skuid,product_href,mrp,price,discount,rating,rating_count,rank,page,sponsored,rank_sponsored,extracted_date,primary_page_name,primary_scroll_times,primary_nav,primary_nav_type,primary_nav_title,primary_nav_subtitle,primary_nav_url,primary_nav_has_brand_name,secondary_page_name,secondary_scroll_times,secondary_nav,secondary_nav_type,secondary_nav_title,secondary_nav_subtitle,secondary_nav_url,secondary_nav_has_brand_name,offer_type,offer_title,offer_start_date,offer_end_date"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "DiscBrowseDetailsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "discbrowse",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "ETL Job to clean data from RawDiscBrowseDetailsBucket, update brand type and write it back to Redshift",
                "Role": {
                    "Ref": "GlueRole"
                },
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/disc_browse.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/disc_browse.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_TABLE": {
                        "Ref": "RawDiscBrowseDetailsTable"
                    },
                    "--GLUE_RDS_DB": {
                        "Ref": "PortalRDSDB"
                    },
                    "--GLUE_RDS_TABLE": {
                        "Ref": "PortalBrandCompetitorMappingTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "RawServiceabilityDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "serviceability",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawServiceabilityDetailsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "serviceability",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for serviceability raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "pincode",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "city",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "region",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "skuId",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "delivery_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "days_for_delivery",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "competitor_of_brands",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "marketplace",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawServiceabilityDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "product_href,product_name,pincode,city,region,skuId,extracted_date,delivery_date,days_for_delivery,brand,competitor_of_brands,marketplace"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "ServiceabilityDetailsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "serviceability",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "ETL Job to clean data from RawServiceabilityDetailsBucket, update city and region and write it back to Redshift",
                "Role": {
                    "Ref": "GlueRole"
                },
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/serviceability.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/serviceability.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_SERVICE_TABLE": {
                        "Ref": "RawServiceabilityDetailsTable"
                    },
                    "--GLUE_RDS_DB": {
                        "Ref": "PortalRDSDB"
                    },
                    "--GLUE_RDS_TABLE": {
                        "Ref": "PortalSeriviceabilityLocationConfigTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "RawPricingDetailsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "pricing",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawPricingDetailsTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "pricing",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for serviceability raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "title",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "mrp",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "price",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "discount",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "discount_percentage",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "bank_offers",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "coupon_offers",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "available",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "marketplace",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawPricingDetailsBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "skuid,brand,category,title,product_href,mrp,price,discount,discount_percentage,extracted_date,bank_offers,coupon_offers,available,marketplace"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },        
        "PricingDetailsGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "pricing",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "ETL Job to clean data from RawPricingDetailsBucket, write it back to Redshift",
                "Role": {
                    "Ref": "GlueRole"
                },
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/pricing.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/pricing.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_PRICING_TABLE": {
                        "Ref": "RawPricingDetailsTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    },
                    "--GLUE_RDS_DB": {
                        "Ref": "PortalRDSDB"
                    },
                    "--GLUE_RDS_TABLE": {
                        "Ref": "PortalBrandCompetitorMappingTable"
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "PortalRDSDB": {
            "Type": "AWS::Glue::Database",
            "Properties": {
                "DatabaseInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "portalrdsdb",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Description": "Glue database to store tables after crawling Portal RDS Db"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "PortalBrandCompetitorMappingTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": ["PortalRDSDB"],
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "portalbrandcompetitormappingtable",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Portal Brand Competitor Mapping Table",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "connectionName": {
                            "Fn::If": [
                                "IsProd",
                                "portal_postgres_prod",
                                "portal_postgres_dev"
                            ]
                        },
                        "classification": "postgresql",
                        "typeOfData": "table"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand_type",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "competitor",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "id",
                                "Type": "int",
                                "Comment": ""
                            }
                        ],
                        "Location": "brand_analytics.public.brandcompetitormapping",
                        "InputFormat": "",
                        "OutputFormat": "",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
                            "Parameters": {}
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "connectionName": {
                                "Fn::If": [
                                    "IsProd",
                                    "portal_postgres_prod",
                                    "portal_postgres_dev"
                                ]
                            },
                            "classification": "postgresql",
                            "typeOfData": "table"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "PortalRDSDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "PortalHotStylesTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": ["PortalRDSDB"],
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "portalhotstylestable",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Portal Hot Styles Request Table",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "connectionName": {
                            "Fn::If": [
                                "IsProd",
                                "portal_postgres_prod",
                                "portal_postgres_dev"
                            ]
                        },
                        "classification": "postgresql",
                        "typeOfData": "table"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel_skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel_parent_skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "details",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "style_type",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "added_date",
                                "Type": "date",
                                "Comment": ""
                            },
                            {
                                "Name": "expiry_date",
                                "Type": "date",
                                "Comment": ""
                            },
                            {
                                "Name": "id",
                                "Type": "int",
                                "Comment": ""
                            }
                        ],
                        "Location": "brand_analytics.public.hotstyles",
                        "InputFormat": "",
                        "OutputFormat": "",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
                            "Parameters": {}
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "connectionName": {
                                "Fn::If": [
                                    "IsProd",
                                    "portal_postgres_prod",
                                    "portal_postgres_dev"
                                ]
                            },
                            "classification": "postgresql",
                            "typeOfData": "table"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "PortalRDSDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "PortalSeriviceabilityLocationConfigTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": ["PortalRDSDB"],
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "portalseriviceabilitylocationconfigtable",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Portal Serviceability Location Config Table",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "connectionName": {
                            "Fn::If": [
                                "IsProd",
                                "portal_postgres_prod",
                                "portal_postgres_dev"
                            ]
                        },
                        "classification": "postgresql",
                        "typeOfData": "table"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "pincode",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "city",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "region",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "id",
                                "Type": "int",
                                "Comment": ""
                            }
                        ],
                        "Location": "brand_analytics.public.serviceabilitylocationconfig",
                        "InputFormat": "",
                        "OutputFormat": "",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
                            "Parameters": {}
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "connectionName": {
                                "Fn::If": [
                                    "IsProd",
                                    "portal_postgres_prod",
                                    "portal_postgres_dev"
                                ]
                            },
                            "classification": "postgresql",
                            "typeOfData": "table"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "PortalRDSDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "PortalSchedulerConfigTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": ["PortalRDSDB"],
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "portalschedulerconfigtable",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Portal Scheduler Jobs",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "connectionName": {
                            "Fn::If": [
                                "IsProd",
                                "portal_postgres_prod",
                                "portal_postgres_dev"
                            ]
                        },
                        "classification": "postgresql",
                        "typeOfData": "table"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "project",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "active",
                                "Type": "boolean",
                                "Comment": ""
                            },
                            {
                                "Name": "arguments",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "frequency",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "marketplace",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "brand_type",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": "brand_analytics.public.schedulerconfig",
                        "InputFormat": "",
                        "OutputFormat": "",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
                            "Parameters": {}
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "connectionName": {
                                "Fn::If": [
                                    "IsProd",
                                    "portal_postgres_prod",
                                    "portal_postgres_dev"
                                ]
                            },
                            "classification": "postgresql",
                            "typeOfData": "table"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "PortalRDSDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "RawBestsellersBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [ "-", [ "rnrv2", "bestsellers",  {"Fn::If" : [ "IsDev", {"Fn::Join": [ "-", [ {"Ref" : "Env"}, {"Ref" : "Username"} ]]}, {"Ref" : "Env"}]} ] ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "AccessControl": "BucketOwnerFullControl",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "RawBestsellersTable": {
            "Type": "AWS::Glue::Table",
            "DependsOn": "RawDetailsDB",
            "Properties": {
                "TableInput": {
                    "Name": {
                        "Fn::Join": [
                            "-",
                            [
                                "rnrv2",
                                "bestsellers",
                                {
                                    "Fn::If": [
                                        "IsDev",
                                        {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "Env"
                                                    },
                                                    {
                                                        "Ref": "Username"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Ref": "Env"
                                        }
                                    ]
                                }
                            ]
                        ]
                    },
                    "Retention": 0,
                    "Description": "Glue Table which hold schema for Bestsellers raw data files",
                    "TableType": "EXTERNAL_TABLE",
                    "Parameters": {
                        "CrawlerSchemaSerializerVersion": "1.0",
                        "CrawlerSchemaDeserializerVersion": "1.0",
                        "compressionType": "none",
                        "classification": "json",
                        "typeOfData": "file"
                    },
                    "StorageDescriptor": {
                        "Columns": [
                            {
                                "Name": "brand",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "channel",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "name",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "skuid",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "product_href",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_1",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_2",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_3",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "category_4",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_1",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_2",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_3",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "rank_4",
                                "Type": "string",
                                "Comment": ""
                            },
                            {
                                "Name": "extracted_date",
                                "Type": "string",
                                "Comment": ""
                            }
                        ],
                        "Location": {
                            "Fn::Sub": "s3://${RawBestsellersBucket}"
                        },
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        "Compressed": "false",
                        "NumberOfBuckets": "-1",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "paths": "brand,channel,name,skuid,product_href,category_1,category_2,category_3,category_4,rank_1,rank_2,rank_3,rank_4,extracted_date"
                            }
                        },
                        "Parameters": {
                            "CrawlerSchemaSerializerVersion": "1.0",
                            "CrawlerSchemaDeserializerVersion": "1.0",
                            "compressionType": "none",
                            "classification": "json",
                            "typeOfData": "file"
                        },
                        "StoredAsSubDirectories": "false"
                    }
                },
                "DatabaseName": {
                    "Ref": "RawDetailsDB"
                },
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "BestsellersGlueJob": {
            "Type": "AWS::Glue::Job",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "bestsellers",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "ETL Job to clean data from Raw Bestsellers Bucket, update brand type and write it back to Redshift",
                "Role": {
                    "Ref": "GlueRole"
                },
                "GlueVersion": "2.0",
                "Connections": {
                    "Connections" : [
                        {
                            "Fn::If": [
                                "IsProd",
                                "rnr_prod",
                                "rnr_dev"
                            ]
                        }
                    ]
                },
                "Command": {
                    "Name": "glueetl",
                    "ScriptLocation": {
                        "Fn::If": [
                            "IsProd",
                            "s3://mensa-github-sync/brand-analytics/glue-scripts/bestsellers.py",
                            "s3://mensa-github-sync/brand-analytics-dev/glue-scripts/bestsellers.py"
                        ]
                    }
                },
                "DefaultArguments": {
                    "--job-bookmark-option": "job-bookmark-enable",
                    "--enable-metrics": "",
                    "--enable-continuous-cloudwatch-log": "true",
                    "--enable-continuous-log-filter": "true",
                    "--TempDir": "s3://aws-glue-temporary-092621740321-ap-south-1",
                    "--continuous-log-logGroup": {
                        "Ref": "LogGroup"
                    },
                    "--continuous-log-logStreamPrefix" : "glue",
                    "--GLUE_DB": {
                        "Ref": "RawDetailsDB"
                    },
                    "--GLUE_TABLE": {
                        "Ref": "RawBestsellersTable"
                    },
                    "--ROLE_ARN": "arn:aws:iam::092621740321:role/RedshiftClusterRole",
                    "--REDSHIFT_DB": {
                        "Fn::If": [ "IsProd", "rnr_prod", "rnr_dev" ]
                    }
                },
                "ExecutionProperty": {
                    "MaxConcurrentRuns": 1
                },
                "MaxRetries": 0,
                "AllocatedCapacity": {
                    "Fn::If": [
                        "IsProd",
                        "10",
                        "10"
                    ]
                }
            }
        },
        "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "lambdarole",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "rnrv2",
                                    "lambdarole",
                                    {
                                        "Fn::If": [
                                            "IsDev",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        {
                                                            "Ref": "Env"
                                                        },
                                                        {
                                                            "Ref": "Username"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "Env"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "writelogs",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Sid": "secretsManagerAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "secretsmanager:GetResourcePolicy",
                                        "secretsmanager:GetSecretValue",
                                        "secretsmanager:DescribeSecret",
                                        "secretsmanager:ListSecretVersionIds",
                                        "secretsmanager:ListSecrets"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "cloudWatchWriteAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "ec2Access",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeVpcEndpoints",
                                        "ec2:DescribeRouteTables",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:DeleteNetworkInterface",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcAttribute"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "iamReadFullAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:ListRolePolicies",
                                        "iam:GetRole",
                                        "iam:GetRolePolicy"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "logsReadWriteAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:/aws-glue/*"
                                    ]
                                },
                                {
                                    "Sid": "s3ReadAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:ListBucket",
                                        "s3:ListAllMyBuckets",
                                        "s3:GetBucketAcl"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:DeleteTags"
                                    ],
                                    "Condition": {
                                        "ForAllValues:StringEquals": {
                                            "aws:TagKeys": [
                                                "aws-glue-service-resource"
                                            ]
                                        }
                                    },
                                    "Resource": [
                                        "arn:aws:ec2:*:*:network-interface/*",
                                        "arn:aws:ec2:*:*:security-group/*",
                                        "arn:aws:ec2:*:*:instance/*"
                                    ]
                                },
                                {
                                    "Sid": "AllowBucketNotification",
                                    "Effect": "Allow",
                                    "Action": "s3:PutBucketNotification",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::*"
                                        }
                                    ]
                                },
                                {
                                    "Sid": "AllowLambdaToPutEvents",
                                    "Effect": "Allow",
                                    "Action": "events:PutEvents",
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "rnrv2",
                                    "s3bucketlambdarole",
                                    {
                                        "Fn::If": [
                                            "IsDev",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        {
                                                            "Ref": "Env"
                                                        },
                                                        {
                                                            "Ref": "Username"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Ref": "Env"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:*",
                                    "Resource": [
                                        "arn:aws:s3:::mensa-github-sync/*"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "SeleniumTasksLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "seleniumlambda",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "Function to create scheduler tasks for all brand analytics",
                "PackageType" : "Image",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ImageUri": {
                        "Fn::Join": [
                            ":",
                            [
                                {
                                    "Ref": "SeleniumLambdaImage"
                                },
                                {
                                    "Fn::If": ["IsProd", "latest", "dev"]
                                }
                            ]
                        ]
                    }
                },
                "Timeout": 900,
                "MemorySize" : 3008,
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "Environment": {
                    "Variables": {
                        "ENV": {
                            "Ref": "Env"
                        },
                        "REGION_NAME":{
                            "Ref" : "AWS::Region" 
                        },
                        "PROXY_SESSION":{
                            "Fn::Sub": "http://user-${ProxyUsername}-sessionduration-1:${ProxyPassword}@in.smartproxy.com:10001"
                        },
                        "PROXY_SESSION_US":{
                            "Fn::Sub": "http://user-${ProxyUsername}-sessionduration-1:${ProxyPassword}@us.smartproxy.com:10002"
                        },
                        "PROXY_ROTATING": {
                            "Fn::Sub": "http://user-${ProxyUsername}:${ProxyPassword}@in.smartproxy.com:10000"
                        }
                    }
                }
            }
        },
        "SeleniumJobApiGateway": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Description": "Rest API Gateway for Selenium Job",
                "EndpointConfiguration": {
                    "Types": [
                        "REGIONAL"
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnr",
                            "seleniumjobApiGateway",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ]
            }
        },
        "SeleniumJobApiGatewayResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "SeleniumJobApiGateway"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "SeleniumJobApiGateway",
                        "RootResourceId"
                    ]
                },
                "PathPart": "seleniumapi"
            }
        },        
        "SeleniumJobApiGatewayMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "ApiKeyRequired": false,
                "HttpMethod": "GET",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Sub": [
                            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations",
                            {
                                "lambdaArn": {
                                    "Fn::GetAtt": [
                                        "SeleniumTasksLambdaFunction",
                                        "Arn"
                                    ]
                                }
                            }
                        ]
                    }
                },
                "ResourceId": {
                    "Ref": "SeleniumJobApiGatewayResource"
                },
                "RestApiId": {
                    "Ref": "SeleniumJobApiGateway"
                }
            }
        },
        "SeleniumJobApiGatewayDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [
                "SeleniumJobApiGatewayMethod"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "SeleniumJobApiGateway"
                },
                "StageName": "selenium"
            }
        },
        "SeleniumLambdaApiGatewayPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "SeleniumTasksLambdaFunction",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SeleniumJobApiGateway}/*/GET/seleniumapi"
                }
            }
        },
        "SchedulerTasksLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "schedulertasks",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Description": "Function to create scheduler tasks for all brand analytics",
                "PackageType" : "Image",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ImageUri": {
                        "Fn::Join": [
                            ":",
                            [
                                {
                                    "Ref": "SchedulerLambdaImage"
                                },
                                {
                                    "Fn::If": ["IsProd", "latest", "dev"]
                                }
                            ]
                        ]
                    }
                },
                "Timeout": 60,
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": "Mensa RnR"
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "Env"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Username"
                        }
                    }
                ],
                "Environment": {
                    "Variables": {
                        "ENV": {
                            "Ref": "Env"
                        },
                        "REGION_NAME": {
                            "Ref" : "AWS::Region" 
                        },
                        "SECRET_NAME_POSTGRESQL_DB": {
                            "Fn::If": [
                                "IsProd",
                                "prod/BrandAnalytics/Postgres",
                                "dev/BrandAnalytics/Postgres"
                            ]
                        },
                        "SECRET_NAME_SCRAPER_AUTH": {
                            "Fn::If": [
                                "IsProd",
                                "prod/MensaScraper/BasicAuth",
                                "dev/MensaScraper/BasicAuth"
                            ]
                        },
                        "SCRAPER_URL": {
                            "Fn::Join": ["", ["http://", {"Fn::GetAtt": ["ScrapydLoadBalancer",  "DNSName" ]}, ":80/schedule.json"]]
                        },
                        "SCRAPYDWEB_LOADBALANCER": {
                            "Fn::GetAtt": ["ScrapydwebLoadBalancer", "DNSName"]
                        }
                    }
                }
            }
        },
        "LambdaTriggerEvent": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "CRON Event runs everyday to trigger Brand Analytics Lambda Functions",
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "rnrv2",
                            "lambdatriggerevent",
                            {
                                "Fn::If": [
                                    "IsDev",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "Env"
                                                },
                                                {
                                                    "Ref": "Username"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "Env"
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "ScheduleExpression": "cron(0 0 * * ? *)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "SchedulerTasksLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Id": "TargetLambdaScheduler"
                    }
                ]
            }
        },
        "PermissionForEventsToInvokeSchedulerLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "SchedulerTasksLambdaFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LambdaTriggerEvent",
                        "Arn"
                    ]
                }
            }
        }
    },
    "Conditions": {
        "IsProd": { "Fn::Equals": [ {"Ref": "Env"}, "prod" ] },
        "IsStage": { "Fn::Equals": [ {"Ref": "Env"}, "stage" ] },
        "IsDev": { "Fn::Equals": [ {"Ref": "Env"}, "dev" ] },
        "IsProdOrStage": { "Fn::Or": [ { "Condition": "IsProd" }, { "Condition": "IsStage" } ] }
    },
    "Outputs": {
        "ScrapydDNS": {
            "Description": "Scrapyd Load Balancer DNS name",
            "Value": {
                "Fn::GetAtt": [
                    "ScrapydLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "ScrapydwebDNS": {
            "Description": "Scrapydweb Load Balancer DNS name",
            "Value": {
                "Fn::GetAtt": [
                    "ScrapydwebLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "SeleniumUrl": {
            "Description": "Endpoint of API Gateway for selenium job",
            "Value": {
                "Fn::Sub": "https://${SeleniumJobApiGateway}.execute-api.${AWS::Region}.amazonaws.com/selenium/seleniumapi"
            }
        }
    }
}